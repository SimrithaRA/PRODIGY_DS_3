# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn import tree
from sklearn.metrics import accuracy_score
import graphviz

# Replace with the actual path to your dataset and specify the delimiter
file_path = "/content/bank.csv"  # Change this to the actual path of your file
delimiter = ';'

# Read the data into a DataFrame
df = pd.read_csv(file_path, delimiter)

# Display the first few rows of the dataset
print(df.head())

# Assuming you want to label-encode categorical data
from sklearn import preprocessing

le = preprocessing.LabelEncoder()
for i in range(0, 17):
    df.iloc[:, i] = le.fit_transform(df.iloc[:, i])

# Split the data into training and test sets
nrows = len(df.index)
percentage = round((nrows * 70) / 100)
trainingData = df.iloc[:percentage, :]
testData = df.iloc[percentage:, :]

print("Number of training data examples: " + str(len(trainingData.index))
print("Number of test examples: " + str(len(testData.index))

# Define features and target variables for training and test sets
train_x = trainingData[["job", "marital", "education", "balance", "housing"]]
train_y = trainingData["loan"]

test_x = testData[["job", "marital", "education", "balance", "housing"]]
test_y = testData["loan"]

# Create a decision tree classifier with entropy as the criterion
treeClassifier = tree.DecisionTreeClassifier(criterion="entropy")

# Train the decision tree classifier
treeClassifier.fit(train_x, train_y)

# Predict and evaluate on the training set
prediction = treeClassifier.predict(train_x)
accuracyScore = accuracy_score(train_y, prediction)
print("The trained tree has an accuracy score on the train set of " + str(accuracyScore))

# Predict and evaluate on the test set
prediction = treeClassifier.predict(test_x)
accuracyScore = accuracy_score(test_y, prediction)
print("The trained tree has an accuracy score on the test set of " + str(accuracyScore))

# Visualize the decision tree with a depth of 4 using Graphviz
featureNames = ["job", "marital", "education", "balance", "housing"]
classNames = ["no", "yes"]

dot_data = tree.export_graphviz(
    decision_tree=treeClassifier,
    feature_names=featureNames,
    class_names=classNames,
    filled=True,
    rounded=True,
    max_depth=4
)
graph = graphviz.Source(dot_data)
graph

# Evaluate decision trees with different depths
for i in range(3, 11):
    treeClassifier = tree.DecisionTreeClassifier(criterion="entropy", max_depth=i)
    treeClassifier.fit(train_x, train_y)

    prediction = treeClassifier.predict(train_x)
    accuracyScore = accuracy_score(train_y, prediction)
    print("The trained tree with depth " + str(i) + " has an accuracy score on the train set of " + str(accuracyScore))

    prediction = treeClassifier.predict(test_x)
    accuracyScore = accuracy_score(test_y, prediction)
    print("The trained tree with depth " + str(i) + " has an accuracy score on the test set of " + str(accuracyScore) + "\n")
